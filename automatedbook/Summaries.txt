        Chapter 1 -- BASICS
It is good to remember the different types of operators 
(+, -, *, /, //, %, and ** for math operations, and + and * for string operations) 
and the three data types (integers, floating-point numbers, and strings).
Interestingly, you can do operations on strings. '3' * 3 evaluates to the string '33' 
and you can even do int('3' * 3) to get the integer 33 instead of 
getting 9 with (3 * 3).
input() for user input evaluates to a string unless prefixed with int()

        Chapter 2 -- FLOW CONTROLS
Give your program certain conditions (True/False) to run certain clauses of codes. 
Operations that these involve are: == , < , <= , > , >= , !=. 
Multiple parameters for your Booleans with "AND" / "OR" (practical use need not be capitalized)
This makes for an interesting programs and unpredictability: this combined with user input, the possibilities are endless.
Can be acheived via: if, elif, and else.
The continue function to loop back to the beginning of a loop
The break function to exit a loop. 
Call the function "bacon" in module "spam" via: spam.bacon()
Use: range(0,11,2) to list 0,2,4,6,8,10.
Use: range(11,0,-2) to list 11,9,7,5,3,1

        Chapter 3 -- FUNCTIONS
Organize your code by creating your own functions.
Start by def funcname():
Call it via funcname()
Local variables inside the function only exist within that function.
These values though can be returned outside via return n. EXAMPLE:

                import random
                def getAnswer(answerNumber):
                 if answerNumber == 1:
                       return 'It is certain'
                 else:
                       return 'Very doubtful'
                r = random.randint(1, 2)
                fortune = getAnswer(r)
                print(fortune)

To avoid crashed in your program do
try:
except errorclause:

        Chapter 4 -- LISTS
Lists are quite useful in that you can store multiple items in one variable. A list of strings, a list of ints.
There are then various functions you can use on them like sort(), remove(), append(), and del listA[2]. Lists are mutable.
Copying a list variable into another copies the pointer or reference, and so any changes to one variable affect the other(s). 
A workaround this is with module copy and the function copy. So ~ import copy and call copy.copy()
There are many things you can do with a list. [1:3] evaluates from items 1 to 2 in the list. 
[-1] evaluates the last item in the list. 
Then there are tuples which take the form of () and are immutable. 
You can change the data type and tuple a list with tuple(['hi]) and list a tuple with list[('hey')]. 

        Chapter 5 -- DICTIONARIES
Dictionaries are like lists but have keys associated with them and they use {}
An example is: cat{'size':'fat'} and print(cat['size']) evaluates to fat. 
Dictionaries are not ordered, and two scrambled dicts with same keys and values would equal to each other.
Guarentee a value is set if not already with the setdefault() function that takes two arguments, first is the key, second is value. 
                spam.setdefault('color', 'white')
A way to itterate over each char in a string and count how many times each occurs is with the following code.
pprint is pretty print and makes output easier to read. 

                import pprint
                message = 'It was a bright cold day in April, and the clocks were striking
                thirteen.'
                count = {}

                for character in message:
                    count.setdefault(character, 0)
                    count[character] = count[character] + 1

                pprint.pprint(count)



    

